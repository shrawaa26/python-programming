import tkinter as tk
from tkinter import messagebox
import json

TODO_FILE = 'todos.json'

def load_todos():
    try:
        with open(TODO_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return []

def save_todos(todos):
    with open(TODO_FILE, 'w') as f:
        json.dump(todos, f, indent=4)

class TodoApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("To-Do List Application")
        self.geometry("400x400")
        self.todos = load_todos()
        self.create_widgets()

    def create_widgets(self):
        self.task_entry = tk.Entry(self)
        self.task_entry.pack(pady=10)
        
        self.add_button = tk.Button(self, text="Add Task", command=self.add_task)
        self.add_button.pack(pady=5)

        self.listbox = tk.Listbox(self)
        self.listbox.pack(pady=10, fill=tk.BOTH, expand=True)
        self.listbox.bind('<Double-1>', self.update_task)

        self.refresh_listbox()

    def add_task(self):
        task = self.task_entry.get()
        if task:
            self.todos.append({"task": task, "done": False})
            save_todos(self.todos)
            self.task_entry.delete(0, tk.END)
            self.refresh_listbox()
        else:
            messagebox.showwarning("Warning", "Task cannot be empty")

    def refresh_listbox(self):
        self.listbox.delete(0, tk.END)
        for idx, todo in enumerate(self.todos):
            status = 'Done' if todo['done'] else 'Pending'
            self.listbox.insert(tk.END, f"{idx + 1}. {todo['task']} - {status}")

    def update_task(self, event):
        selection = self.listbox.curselection()
        if selection:
            idx = selection[0]
            self.todos[idx]['done'] = not self.todos[idx]['done']
            save_todos(self.todos)
            self.refresh_listbox()

if __name__ == "__main__":
    app = TodoApp()
    app.mainloop()
